{
	"info": {
		"_postman_id": "040384e5-7a64-4d78-94bf-70f5b067b912",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "Get user by user name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const ResponseCode = pm.variables.get(\"code\");\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
											"    //const jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
											"\r",
											" if (pm.response.to.have.status(200)) {\r",
											"\r",
											"    pm.test(\"User name returned as we searched\", function () {\r",
											"        pm.expect(jsonData.username).to.equal(pm.variables.get(\"username\"));;\r",
											"    });\r",
											"\r",
											"    pm.test(\"User ID is returned on the response and not equal NULL \", function () {\r",
											"        //const jsonData = pm.response.json();\r",
											"       pm.expect(jsonData.id).to.be.exist;\r",
											"       pm.expect(jsonData.id).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"     pm.test(\"userStatus is returned on the response\", function () {\r",
											"        const jsonData = pm.response.json();\r",
											"       pm.expect(jsonData.userStatus).to.be.exist;\r",
											"    });\r",
											"}else {\r",
											"    pm.test(\"check if searching for an existing user {User not found} \", function () {\r",
											"       pm.expect(jsonData.code).to.equal(1);\r",
											"\r",
											"});\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "{{username}}",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								},
								"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": -90553044,\n \"username\": \"cupidatat enim aliquip consectetur\",\n \"firstName\": \"in consequat sed\",\n \"lastName\": \"ad anim cillum\",\n \"email\": \"nulla sunt aute veniam\",\n \"password\": \"ut do\",\n \"phone\": \"in sed\",\n \"userStatus\": -41155862\n}"
								},
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Updated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const ResponseCode = pm.variables.get(\"code\");\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
											"    //const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
											"});\r",
											"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
											"\r",
											" if (pm.variables.get(\"code\") == jsonData.code) {\r",
											"\r",
											"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
											"        //const jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
											"        //const jsonData = pm.response.json();\r",
											"       pm.expect(jsonData.type).to.be.exist;\r",
											"       pm.expect(jsonData.type).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
											"        const jsonData = pm.response.json();\r",
											"       pm.expect(jsonData.message).to.not.equal(null);\r",
											"       pm.expect(jsonData.message).to.be.exist;\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -90553044,\n     \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": -41155862\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "{{username}}",
											"description": "(Required) name that need to be updated"
										}
									]
								},
								"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
							},
							"response": [
								{
									"name": "Invalid user supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": -90553044,\n    \"username\": \"cupidatat enim aliquip consectetur\",\n    \"firstName\": \"in consequat sed\",\n    \"lastName\": \"ad anim cillum\",\n    \"email\": \"nulla sunt aute veniam\",\n    \"password\": \"ut do\",\n    \"phone\": \"in sed\",\n    \"userStatus\": -41155862\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) name that need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": -90553044,\n    \"username\": \"cupidatat enim aliquip consectetur\",\n    \"firstName\": \"in consequat sed\",\n    \"lastName\": \"ad anim cillum\",\n    \"email\": \"nulla sunt aute veniam\",\n    \"password\": \"ut do\",\n    \"phone\": \"in sed\",\n    \"userStatus\": -41155862\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) name that need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const ResponseCode = pm.variables.get(\"code\");\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
											"    //const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
											"});\r",
											"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
											"\r",
											" if (pm.variables.get(\"code\") == jsonData.code) {\r",
											"\r",
											"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
											"        //const jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
											"        //const jsonData = pm.response.json();\r",
											"       pm.expect(jsonData.type).to.be.exist;\r",
											"       pm.expect(jsonData.type).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
											"        const jsonData = pm.response.json();\r",
											"       pm.expect(jsonData.message).to.equal(pm.variables.get(\"username\"));\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "{{username}}",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								},
								"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
							},
							"response": [
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) The name that needs to be deleted"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "Duis",
													"description": "(Required) The name that needs to be deleted"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ResponseCode = pm.variables.get(\"code\");\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
									"    //const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
									"});\r",
									"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
									"\r",
									" if (pm.variables.get(\"code\") == jsonData.code) {\r",
									"\r",
									"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.type).to.be.exist;\r",
									"       pm.expect(jsonData.type).to.not.equal(null);\r",
									"    });\r",
									"\r",
									"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
									"        const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.message).to.not.equal(null);\r",
									"       pm.expect(jsonData.message).to.be.exist;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"id\": -90553044,\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": -41155862\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\" \n3- Press on \"Run collection\" \n4- Selected All OR this only API to run the automation \n5- press on \"select file\" \n6- Select the (create_user.csv) file \n7- press on \"Run swagger petstore\""
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -90553044,\n    \"username\": \"cupidatat enim aliquip consectetur\",\n    \"firstName\": \"in consequat sed\",\n    \"lastName\": \"ad anim cillum\",\n    \"email\": \"nulla sunt aute veniam\",\n    \"password\": \"ut do\",\n    \"phone\": \"in sed\",\n    \"userStatus\": -41155862\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ResponseCode = pm.variables.get(\"code\");\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
									"    //const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
									"});\r",
									"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
									"\r",
									" if (pm.variables.get(\"code\") == jsonData.code) {\r",
									"\r",
									"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.type).to.be.exist;\r",
									"       pm.expect(jsonData.type).to.not.equal(null);\r",
									"    });\r",
									"\r",
									"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
									"        const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.message).to.not.equal(null);\r",
									"       pm.expect(jsonData.message).to.be.exist;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": -59148825,\n        \"username\": \"{{username}}\",\n         \"firstName\": \"{{firstName}}\",\n         \"lastName\": \"{{lastName}}\",\n         \"email\": \"{{email}}\",\n         \"password\": \"{{password}}\",\n         \"phone\": \"{{phone}}\",\n         \"userStatus\": -33892737\n    },\n    {\n        \"id\": 81379937,\n         \"username\": \"{{username}}\",\n         \"firstName\": \"{{firstName}}\",\n         \"lastName\": \"{{lastName}}\",\n         \"email\": \"{{email}}\",\n         \"password\": \"{{password}}\",\n         \"phone\": \"{{phone}}\",\n        \"userStatus\": -80522304\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						},
						"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ResponseCode = pm.variables.get(\"code\");\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
									"    //const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
									"});\r",
									"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
									"\r",
									" if (pm.variables.get(\"code\") == jsonData.code) {\r",
									"\r",
									"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.type).to.be.exist;\r",
									"       pm.expect(jsonData.type).to.not.equal(null);\r",
									"    });\r",
									"\r",
									"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
									"        const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.message).to.not.equal(null);\r",
									"       pm.expect(jsonData.message).to.be.exist;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{username}}&password={{password}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) The password for login in clear text"
								}
							]
						},
						"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=Duis&password=Duis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "Duis"
										},
										{
											"key": "password",
											"value": "Duis"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "1981-10-10T01:48:51.714Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "58565244",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"Duis\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=Duis&password=Duis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "Duis"
										},
										{
											"key": "password",
											"value": "Duis"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ResponseCode = pm.variables.get(\"code\");\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
									"    //const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
									"});\r",
									"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
									"\r",
									" if (pm.variables.get(\"code\") == jsonData.code) {\r",
									"\r",
									"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.type).to.be.exist;\r",
									"       pm.expect(jsonData.type).to.not.equal(null);\r",
									"    });\r",
									"\r",
									"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
									"        const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.message).to.not.equal(null);\r",
									"       pm.expect(jsonData.message).to.be.exist;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						},
						"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ResponseCode = pm.variables.get(\"code\");\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check Response Code field exists and return equal 200\", function () {  \r",
									"    //const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(ResponseCode);\r",
									"});\r",
									"//Setting Response Code  in collectionVariables variables to check firstly that values as shown to continue testing the data types or not \r",
									"\r",
									" if (pm.variables.get(\"code\") == jsonData.code) {\r",
									"\r",
									"    pm.test(\"codeType is INT DataType And create the user successfully\", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type is returned on the response and not equal NULL \", function () {\r",
									"        //const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.type).to.be.exist;\r",
									"       pm.expect(jsonData.type).to.not.equal(null);\r",
									"    });\r",
									"\r",
									"     pm.test(\"Message  is returned on the response and not equal NULL \", function () {\r",
									"        const jsonData = pm.response.json();\r",
									"       pm.expect(jsonData.message).to.not.equal(null);\r",
									"       pm.expect(jsonData.message).to.be.exist;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": -75543978,\n        \"username\": \"{{username}}\",\n         \"firstName\": \"{{firstName}}\",\n         \"lastName\": \"{{lastName}}\",\n         \"email\": \"{{email}}\",\n         \"password\": \"{{password}}\",\n         \"phone\": \"{{phone}}\",\n        \"userStatus\": -40945827\n    },\n    {\n        \"id\": -3954231,\n        \"username\": \"{{username}}\",\n         \"firstName\": \"{{firstName}}\",\n         \"lastName\": \"{{lastName}}\",\n         \"email\": \"{{email}}\",\n         \"password\": \"{{password}}\",\n         \"phone\": \"{{phone}}\",\n        \"userStatus\": 13412381\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						},
						"description": "Please follow these steps to create a new user:\n1- Download from the GitHub link (create_user.csv)\n2- Press on \"view more action\"\n3- Press on \"Run collection\"\n4- Selected All OR this only API to run the automation\n5- press on \"select file\"\n6- Select the (create_user.csv) file\n7- press on \"Run swagger petstore\""
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}